#define R 4
#define C 4
bool isvalid(int m, int n)
{
    return (m >= 0 && n >= 0 && m < R && j < C);
}
 

struct ele {
    int x, y;
};
 

bool isdelim(ele temp)
{
    return (temp.x == -1 && temp.y == -1);
}
 

bool checkall(int arr[][C])
{
    for (int m=0; m<R; m++)
       for (int n=0; n<C; n++)
          if (arr[m][n] == 1)
             return true;
    return false;
}
 

int rotOranges(int arr[][C])
{
    // Create a queue of cells
    queue<ele> Q;
    ele temp;
    int ans = 0;
 
  
    for (int m=0; m<R; m++)
    {
       for (int n=0; n<C; n++)
       {
            if (arr[m][n] == 2)
            {
                temp.x = m;
                temp.y = n;
                Q.push(temp);
            }
        }
    }
 
 
    temp.x = -1;
    temp.y = -1;
    Q.push(temp);
 

    while (!Q.empty())
    {
      
        bool flag = false;
 
       
        while (!isdelim(Q.front()))
        {
            temp = Q.front();
 
      
            if (isvalid(temp.x+1, temp.y) && arr[temp.x+1][temp.y] == 1)
            {
            
                if (!flag) ans++, flag = true;
 
             
                arr[temp.x+1][temp.y] = 2;
 
                temp.x++;
                Q.push(temp);
 
                temp.x--; 
            }
 
           
            if (isvalid(temp.x-1, temp.y) && arr[temp.x-1][temp.y] == 1) {
                if (!flag) ans++, flag = true;
                arr[temp.x-1][temp.y] = 2;
                temp.x--;
                Q.push(temp); 
                temp.x++;
            }
 
           
            if (isvalid(temp.x, temp.y+1) && arr[temp.x][temp.y+1] == 1) {
                if (!flag) ans++, flag = true;
                arr[temp.x][temp.y+1] = 2;
                temp.y++;
                Q.push(temp); 
                temp.y--;
            }
 
           
            if (isvalid(temp.x, temp.y-1) && arr[temp.x][temp.y-1] == 1) {
                if (!flag) ans++, flag = true;
                arr[temp.x][temp.y-1] = 2;
                temp.y--;
                Q.push(temp); 
            }
 
            Q.pop();
        }
 
      
        Q.pop();
 
  
        if (!Q.empty()) {
            temp.x = -1;
            temp.y = -1;
            Q.push(temp);
        }
 
       
    }
 
  
    return (checkall(arr))? -1: ans;
}
